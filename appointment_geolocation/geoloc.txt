=== /home/adulam/Documents/custom_addons/appointment_geolocation/views/calendar_event_tree_inherit.xml ===

<odoo>
    <!-- Inherit the tree view for calendar.event that displays appointments -->
    <record id="view_calendar_event_tree_geolocation" model="ir.ui.view">
        <field name="name">calendar.event.tree.geolocation</field>
        <field name="model">calendar.event</field>
        <!-- Reference the existing tree view by its external ID -->
        <field name="inherit_id" ref="appointment.calendar_event_view_tree_booking"/>
        <field name="arch" type="xml">

            <!-- Insert latitude/longitude right after the 'stop' field (or wherever you prefer) -->
            <xpath expr="//field[@name='stop']" position="after">
                <!--<field name="latitude" string="Latitude"/>-->
                <!--<field name="longitude" string="Longitude"/>-->
		<field name="location_url" string="Map" widget="url"/>
            </xpath>

        </field>
    </record>
</odoo>
=== /home/adulam/Documents/custom_addons/appointment_geolocation/views/actions.xml ===
<odoo>
    <record id="action_confirm_checkin" model="ir.actions.client">
        <field name="name">Confirm Check-In</field>
        <field name="tag">appointment_geolocation.confirm_checkin</field>
    </record>
</odoo>
=== /home/adulam/Documents/custom_addons/appointment_geolocation/views/calendar_event_form_inherit.xml ===
<odoo>
  <!-- Inherit the standard calendar event form view to add geolocation fields and a check-in button -->
  <record id="view_calendar_event_form_geolocation" model="ir.ui.view">
    <field name="name">calendar.event.form.geolocation</field>
    <field name="model">calendar.event</field>
    <field name="inherit_id" ref="calendar.view_calendar_event_form"/>
    <field name="arch" type="xml">
      
      <!-- Insert geolocation fields inside the form -->
      <xpath expr="//sheet" position="inside">
        <group string="Geolocation" colspan="2">
          <field name="latitude" readonly="1"/>
          <field name="longitude" readonly="1"/>
        </group>
      </xpath>

      <!-- Ensure the <header> is properly wrapped inside <xpath> -->
      <xpath expr="//form" position="inside">
        <header>
          <button name="action_confirm_checkin"
                  type="object"
                  string="Confirm Check-In"
                  class="oe_highlight"
                  icon="fa-map-marker"/>
        </header>
      </xpath>

    </field>
  </record>
</odoo>
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/src/xml/geolocation_gantt_popover.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">
  <t t-inherit="appointment.AppointmentBookingGanttPopover" t-inherit-mode="extension">
    <xpath expr="//button" position="after">
      <button class="btn btn-sm btn-primary me-1" t-on-click="onClickCaptureLocation">
         Capture Location
      </button>
    </xpath>
  </t>
</templates>
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/src/js/override_gantt_checdqwdkin.js ===
/** @odoo-module **/

import { patch } from "@web/core/utils/patch";
import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";
import { rpc } from "@web/core/network/rpc_service";

// Save the original method
const originalOnClickAttended = AppointmentBookingGanttPopover.prototype.onClickAttended;

/**
 * Patch the popover to capture geolocation when "Confirm Check-In" is clicked.
 */
patch(AppointmentBookingGanttPopover.prototype, {
    async onClickAttended(ev) {
        console.log("Patched onClickAttended triggered.");

        // If props.attendedState is false => we are about to confirm check-in
        // If props.attendedState is true => we are about to unconfirm check-in
        const isConfirm = !this.props.attendedState;

        if (isConfirm) {
            // Confirming check-in => capture geolocation
            if (!navigator.geolocation) {
                console.warn("Geolocation not supported. Fallback to original method.");
                return originalOnClickAttended.call(this, ev);
            }

            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    console.log("Retrieved geolocation:", latitude, longitude);

                    try {
                        const result = await rpc({
                            route: "/appointment_geolocation/checkin",
                            params: {
                                event_id: this.props.context.id,  // ID from popover context
                                latitude,
                                longitude,
                            },
                        });
                        if (result.status === "success") {
                            console.log("Geolocation captured successfully!");
                            // Now proceed with the original logic
                            originalOnClickAttended.call(this, ev);
                        } else {
                            console.error("Error capturing geolocation:", result.message);
                        }
                    } catch (error) {
                        console.error("RPC error while capturing geolocation:", error);
                    }
                },
                (error) => {
                    console.error("Error retrieving geolocation:", error.message);
                }
            );
        } else {
            // Unconfirm check-in => you might reset geolocation or just call the original
            console.log("Unconfirming check-in. No geolocation capture needed, calling original method.");
            originalOnClickAttended.call(this, ev);
        }
    },
});
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/src/js/override_gantt_checkin.js ===
/** @odoo-module **/

import { patch } from "@web/core/utils/patch";
import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";

/**
 * Keep a reference to the original onClickAttended method so we can call it
 * after updating the record. We do two flows:
 *  - Confirm Check-In: capture geolocation, store lat/long
 *  - Unconfirm Check-In: reset lat/long to 0.0
 */
const originalOnClickAttended = AppointmentBookingGanttPopover.prototype.onClickAttended;

patch(AppointmentBookingGanttPopover.prototype, {
    async onClickAttended(ev) {
        console.log("Patched onClickAttended triggered. All props =", this.props);

        // If false => user is about to confirm check-in
        // If true  => user is about to unconfirm check-in
        const isConfirm = !this.props.attendedState;

        // The event ID from the popover context
        const eventId = this.props.context?.id;
        if (!eventId) {
            console.error("No eventId found in props.context. Falling back to original method.");
            return originalOnClickAttended.call(this, ev);
        }

        if (isConfirm) {
            // -------------------------------
            // CONFIRM CHECK-IN => CAPTURE GEO
            // -------------------------------
            if (!navigator.geolocation) {
                console.warn("Geolocation is not supported. Fallback to original method.");
                return originalOnClickAttended.call(this, ev);
            }

            // 1) Capture geolocation
            let position;
            try {
                position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                });
            } catch (err) {
                console.error("Error retrieving geolocation:", err.message);
                return originalOnClickAttended.call(this, ev);
            }

            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            console.log("Retrieved geolocation:", latitude, longitude);

            // 2) Send JSON-RPC style POST to /appointment_geolocation/checkin
            let data;
            try {
                const response = await fetch("/appointment_geolocation/checkin", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        jsonrpc: "2.0",
                        method: "call",
                        params: { event_id: eventId, latitude, longitude },
                        id: 1
                    })
                });
                data = await response.json();
            } catch (error) {
                console.error("Network error while capturing geolocation:", error);
                return originalOnClickAttended.call(this, ev);
            }

            // 3) Check the server response
            console.log("Response from /appointment_geolocation/checkin:", data);
            if (data.result && data.result.status === "success") {
                console.log("Geolocation captured successfully!");
                // Proceed with native check-in
                originalOnClickAttended.call(this, ev);
            } else {
                console.error("Error capturing geolocation:", data.error || data.result);
                // Optionally skip or proceed anyway
                originalOnClickAttended.call(this, ev);
            }

        } else {
            // -------------------------------
            // UNCONFIRM => RESET GEO TO 0.0
            // -------------------------------
            console.log("Unconfirming check-in => resetting lat/long to 0.0");
            let data;
            try {
                const response = await fetch("/appointment_geolocation/uncheckin", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        jsonrpc: "2.0",
                        method: "call",
                        params: { event_id: eventId },
                        id: 1
                    })
                });
                data = await response.json();
            } catch (error) {
                console.error("Network error while resetting geolocation:", error);
                return originalOnClickAttended.call(this, ev);
            }

            console.log("Response from /appointment_geolocation/uncheckin:", data);
            if (data.result && data.result.status === "success") {
                console.log("Geolocation reset to 0.0 successfully!");
                // Proceed with native unconfirm
                originalOnClickAttended.call(this, ev);
            } else {
                console.error("Error resetting geolocation:", data.error || data.result);
                // Possibly still proceed with unconfirm
                originalOnClickAttended.call(this, ev);
            }
        }
    },
});
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/src/js/geolocation_gantt_popover.js ===
/** @odoo-module alias=appointment_geolocation/js/geolocation_gantt_popover **/

import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";
import { useService } from "@web/core/utils/hooks";
import { patch } from "@web/core/utils/patch";

// Patch the AppointmentBookingGanttPopover prototype with our new methods.
patch(AppointmentBookingGanttPopover.prototype, {
    setup() {
        // Call the original setup method.
        super.setup();
        // Initialize the RPC and notification services.
        this.rpc = useService("rpc");
        this.notification = useService("notification");
        console.log("Geolocation patch successfully applied on AppointmentBookingGanttPopover.");
    },
    onClickCaptureLocation() {
        console.log("Capture Location button clicked.");
        if (!navigator.geolocation) {
            this.notification.add("Geolocation is not supported by this browser.", { type: "danger" });
            return;
        }
        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                try {
                    const result = await this.rpc("/appointment_geolocation/checkin", {
                        event_id: this.props.context.id,
                        latitude: latitude,
                        longitude: longitude,
                    });
                    if (result.status === "success") {
                        this.notification.add("Geolocation captured successfully!", { type: "success" });
                        // Close the popover after successful capture.
                        this.props.close();
                    } else {
                        this.notification.add("Error capturing geolocation: " + result.message, { type: "danger" });
                    }
                } catch (error) {
                    this.notification.add("Error capturing geolocation: " + error.message, { type: "danger" });
                }
            },
            (error) => {
                this.notification.add("Error retrieving geolocation: " + error.message, { type: "danger" });
            }
        );
    },
});
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/src/js/geolocation_action.js ===
/** @odoo-module **/

import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { Component, xml } from "@odoo/owl";

export class AppointmentGeolocationAction extends Component {
    static template = xml`
        <div class="o_appointment_geolocation_action">
            <h3>Confirming Check-In...</h3>
            <p>Retrieving your geolocation. Please wait...</p>
        </div>
    `;

    setup() {
        this.actionService = useService("action");
        this.rpc = useService("rpc");
        this.notification = useService("notification");
        this.event_id = this.props.action.params.event_id;
        this.captureGeolocation();
    }

    captureGeolocation() {
        if (!navigator.geolocation) {
            this.notification.add("Geolocation is not supported by this browser.", { type: "danger" });
            return;
        }

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                let latitude = position.coords.latitude;
                let longitude = position.coords.longitude;
                console.log("Retrieved Geolocation:", "Latitude =", latitude, "Longitude =", longitude);

                try {
                    const result = await this.rpc("/appointment_geolocation/checkin", {
                        event_id: this.event_id,
                        latitude: latitude,
                        longitude: longitude,
                    });

                    if (result.status === "success") {
                        this.notification.add("Geolocation updated successfully!", { type: "success" });

                        // Refresh the event form after successful check-in
                        this.actionService.doAction({
                            type: "ir.actions.act_window",
                            res_model: "calendar.event",
                            res_id: this.event_id,
                            views: [[false, "form"]],
                            target: "current",
                        });
                    } else {
                        this.notification.add("Error updating geolocation: " + result.message, { type: "danger" });
                    }
                } catch (error) {
                    this.notification.add("Error updating geolocation: " + error.message, { type: "danger" });
                }
            },
            (error) => {
                this.notification.add("Error retrieving geolocation: " + error.message, { type: "danger" });
            }
        );
    }
}

// ? Fix: Properly register the client action in Odoo 17
registry.category("actions").add("appointment_geolocation.confirm_checkin", AppointmentGeolocationAction);
=== /home/adulam/Documents/custom_addons/appointment_geolocation/static/description/banner.mp4 ===
bannner.png
icon.png 
=== /home/adulam/Documents/custom_addons/appointment_geolocation/__manifest__.py ===
{
    "name": "Appointment Geolocation",
    "version": "17.0.1.0.0",
    "summary": "Capture and store geolocation on appointment checkin",
    "description": "This module captures the current geolocation when an employee confirms checkin on an appointment.",
    "category": "Tools",
    "author": "Metro Ict Limited",
    "website": "https://odoo.co.ke",
    "license": "LGPL-3",
    "depends": [
        "appointment",
        "calendar",
        "web",
        "web_gantt"

    ],
    "data": [
        "views/calendar_event_form_inherit.xml",
        "views/actions.xml",
        "views/calendar_event_tree_inherit.xml",
    ],


    "assets": {
        "web.assets_backend": [
            "appointment_geolocation/static/src/js/geolocation_action.js",
            "appointment_geolocation/static/src/js/geolocation_gantt_popover.js",
            "appointment_geolocation/static/src/js/override_gantt_checkin.js",
            "appointment_geolocation/static/src/xml/geolocation_gantt_popover.xml",

        ]
    },


    "installable": True,
    "application": False,
    "auto_install": False
}
=== /home/adulam/Documents/custom_addons/appointment_geolocation/controllers/geolocation_controller.py ===
from odoo import http
from odoo.http import request

class GeolocationController(http.Controller):

    @http.route('/appointment_geolocation/checkin', type='json', auth="user")
    def checkin(self, event_id, latitude, longitude):
        event = request.env['calendar.event'].browse(event_id)
        if event:
            event.sudo().write({'latitude': latitude, 'longitude': longitude})
            return {"status": "success"}
        return {"status": "error", "message": "Event not found"}

    @http.route('/appointment_geolocation/uncheckin', type='json', auth="user")
    def uncheckin(self, event_id):
        """
        Reset the geolocation fields to 0.0 for the given event_id
        """
        event = request.env['calendar.event'].browse(event_id)
        if event:
            event.sudo().write({'latitude': 0.0, 'longitude': 0.0})
            return {"status": "success"}
        return {"status": "error", "message": "Event not found"}=== /home/adulam/Documents/custom_addons/appointment_geolocation/controllers/__init__.py ===
from . import geolocation_controller
=== /home/adulam/Documents/custom_addons/appointment_geolocation/combined_output.txt ===

<odoo>
    <!-- Inherit the tree view for calendar.event that displays appointments -->
    <record id="view_calendar_event_tree_geolocation" model="ir.ui.view">
        <field name="name">calendar.event.tree.geolocation</field>
        <field name="model">calendar.event</field>
        <!-- Reference the existing tree view by its external ID -->
        <field name="inherit_id" ref="appointment.calendar_event_view_tree_booking"/>
        <field name="arch" type="xml">

            <!-- Insert latitude/longitude right after the 'stop' field (or wherever you prefer) -->
            <xpath expr="//field[@name='stop']" position="after">
                <!--<field name="latitude" string="Latitude"/>-->
                <!--<field name="longitude" string="Longitude"/>-->
		<field name="location_url" string="Map" widget="url"/>
            </xpath>

        </field>
    </record>
</odoo>
<odoo>
    <record id="action_confirm_checkin" model="ir.actions.client">
        <field name="name">Confirm Check-In</field>
        <field name="tag">appointment_geolocation.confirm_checkin</field>
    </record>
</odoo>
<odoo>
  <!-- Inherit the standard calendar event form view to add geolocation fields and a check-in button -->
  <record id="view_calendar_event_form_geolocation" model="ir.ui.view">
    <field name="name">calendar.event.form.geolocation</field>
    <field name="model">calendar.event</field>
    <field name="inherit_id" ref="calendar.view_calendar_event_form"/>
    <field name="arch" type="xml">
      
      <!-- Insert geolocation fields inside the form -->
      <xpath expr="//sheet" position="inside">
        <group string="Geolocation" colspan="2">
          <field name="latitude" readonly="1"/>
          <field name="longitude" readonly="1"/>
        </group>
      </xpath>

      <!-- Ensure the <header> is properly wrapped inside <xpath> -->
      <xpath expr="//form" position="inside">
        <header>
          <button name="action_confirm_checkin"
                  type="object"
                  string="Confirm Check-In"
                  class="oe_highlight"
                  icon="fa-map-marker"/>
        </header>
      </xpath>

    </field>
  </record>
</odoo>
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">
  <t t-inherit="appointment.AppointmentBookingGanttPopover" t-inherit-mode="extension">
    <xpath expr="//button" position="after">
      <button class="btn btn-sm btn-primary me-1" t-on-click="onClickCaptureLocation">
         Capture Location
      </button>
    </xpath>
  </t>
</templates>
/** @odoo-module **/

import { patch } from "@web/core/utils/patch";
import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";
import { rpc } from "@web/core/network/rpc_service";

// Save the original method
const originalOnClickAttended = AppointmentBookingGanttPopover.prototype.onClickAttended;

/**
 * Patch the popover to capture geolocation when "Confirm Check-In" is clicked.
 */
patch(AppointmentBookingGanttPopover.prototype, {
    async onClickAttended(ev) {
        console.log("Patched onClickAttended triggered.");

        // If props.attendedState is false => we are about to confirm check-in
        // If props.attendedState is true => we are about to unconfirm check-in
        const isConfirm = !this.props.attendedState;

        if (isConfirm) {
            // Confirming check-in => capture geolocation
            if (!navigator.geolocation) {
                console.warn("Geolocation not supported. Fallback to original method.");
                return originalOnClickAttended.call(this, ev);
            }

            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    console.log("Retrieved geolocation:", latitude, longitude);

                    try {
                        const result = await rpc({
                            route: "/appointment_geolocation/checkin",
                            params: {
                                event_id: this.props.context.id,  // ID from popover context
                                latitude,
                                longitude,
                            },
                        });
                        if (result.status === "success") {
                            console.log("Geolocation captured successfully!");
                            // Now proceed with the original logic
                            originalOnClickAttended.call(this, ev);
                        } else {
                            console.error("Error capturing geolocation:", result.message);
                        }
                    } catch (error) {
                        console.error("RPC error while capturing geolocation:", error);
                    }
                },
                (error) => {
                    console.error("Error retrieving geolocation:", error.message);
                }
            );
        } else {
            // Unconfirm check-in => you might reset geolocation or just call the original
            console.log("Unconfirming check-in. No geolocation capture needed, calling original method.");
            originalOnClickAttended.call(this, ev);
        }
    },
});
/** @odoo-module **/

import { patch } from "@web/core/utils/patch";
import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";

/**
 * Keep a reference to the original onClickAttended method so we can call it
 * after updating the record. We do two flows:
 *  - Confirm Check-In: capture geolocation, store lat/long
 *  - Unconfirm Check-In: reset lat/long to 0.0
 */
const originalOnClickAttended = AppointmentBookingGanttPopover.prototype.onClickAttended;

patch(AppointmentBookingGanttPopover.prototype, {
    async onClickAttended(ev) {
        console.log("Patched onClickAttended triggered. All props =", this.props);

        // If false => user is about to confirm check-in
        // If true  => user is about to unconfirm check-in
        const isConfirm = !this.props.attendedState;

        // The event ID from the popover context
        const eventId = this.props.context?.id;
        if (!eventId) {
            console.error("No eventId found in props.context. Falling back to original method.");
            return originalOnClickAttended.call(this, ev);
        }

        if (isConfirm) {
            // -------------------------------
            // CONFIRM CHECK-IN => CAPTURE GEO
            // -------------------------------
            if (!navigator.geolocation) {
                console.warn("Geolocation is not supported. Fallback to original method.");
                return originalOnClickAttended.call(this, ev);
            }

            // 1) Capture geolocation
            let position;
            try {
                position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                });
            } catch (err) {
                console.error("Error retrieving geolocation:", err.message);
                return originalOnClickAttended.call(this, ev);
            }

            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            console.log("Retrieved geolocation:", latitude, longitude);

            // 2) Send JSON-RPC style POST to /appointment_geolocation/checkin
            let data;
            try {
                const response = await fetch("/appointment_geolocation/checkin", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        jsonrpc: "2.0",
                        method: "call",
                        params: { event_id: eventId, latitude, longitude },
                        id: 1
                    })
                });
                data = await response.json();
            } catch (error) {
                console.error("Network error while capturing geolocation:", error);
                return originalOnClickAttended.call(this, ev);
            }

            // 3) Check the server response
            console.log("Response from /appointment_geolocation/checkin:", data);
            if (data.result && data.result.status === "success") {
                console.log("Geolocation captured successfully!");
                // Proceed with native check-in
                originalOnClickAttended.call(this, ev);
            } else {
                console.error("Error capturing geolocation:", data.error || data.result);
                // Optionally skip or proceed anyway
                originalOnClickAttended.call(this, ev);
            }

        } else {
            // -------------------------------
            // UNCONFIRM => RESET GEO TO 0.0
            // -------------------------------
            console.log("Unconfirming check-in => resetting lat/long to 0.0");
            let data;
            try {
                const response = await fetch("/appointment_geolocation/uncheckin", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        jsonrpc: "2.0",
                        method: "call",
                        params: { event_id: eventId },
                        id: 1
                    })
                });
                data = await response.json();
            } catch (error) {
                console.error("Network error while resetting geolocation:", error);
                return originalOnClickAttended.call(this, ev);
            }

            console.log("Response from /appointment_geolocation/uncheckin:", data);
            if (data.result && data.result.status === "success") {
                console.log("Geolocation reset to 0.0 successfully!");
                // Proceed with native unconfirm
                originalOnClickAttended.call(this, ev);
            } else {
                console.error("Error resetting geolocation:", data.error || data.result);
                // Possibly still proceed with unconfirm
                originalOnClickAttended.call(this, ev);
            }
        }
    },
});
/** @odoo-module alias=appointment_geolocation/js/geolocation_gantt_popover **/

import { AppointmentBookingGanttPopover } from "@appointment/views/gantt/gantt_popover";
import { useService } from "@web/core/utils/hooks";
import { patch } from "@web/core/utils/patch";

// Patch the AppointmentBookingGanttPopover prototype with our new methods.
patch(AppointmentBookingGanttPopover.prototype, {
    setup() {
        // Call the original setup method.
        super.setup();
        // Initialize the RPC and notification services.
        this.rpc = useService("rpc");
        this.notification = useService("notification");
        console.log("Geolocation patch successfully applied on AppointmentBookingGanttPopover.");
    },
    onClickCaptureLocation() {
        console.log("Capture Location button clicked.");
        if (!navigator.geolocation) {
            this.notification.add("Geolocation is not supported by this browser.", { type: "danger" });
            return;
        }
        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                try {
                    const result = await this.rpc("/appointment_geolocation/checkin", {
                        event_id: this.props.context.id,
                        latitude: latitude,
                        longitude: longitude,
                    });
                    if (result.status === "success") {
                        this.notification.add("Geolocation captured successfully!", { type: "success" });
                        // Close the popover after successful capture.
                        this.props.close();
                    } else {
                        this.notification.add("Error capturing geolocation: " + result.message, { type: "danger" });
                    }
                } catch (error) {
                    this.notification.add("Error capturing geolocation: " + error.message, { type: "danger" });
                }
            },
            (error) => {
                this.notification.add("Error retrieving geolocation: " + error.message, { type: "danger" });
            }
        );
    },
});
/** @odoo-module **/

import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { Component, xml } from "@odoo/owl";

export class AppointmentGeolocationAction extends Component {
    static template = xml`
        <div class="o_appointment_geolocation_action">
            <h3>Confirming Check-In...</h3>
            <p>Retrieving your geolocation. Please wait...</p>
        </div>
    `;

    setup() {
        this.actionService = useService("action");
        this.rpc = useService("rpc");
        this.notification = useService("notification");
        this.event_id = this.props.action.params.event_id;
        this.captureGeolocation();
    }

    captureGeolocation() {
        if (!navigator.geolocation) {
            this.notification.add("Geolocation is not supported by this browser.", { type: "danger" });
            return;
        }

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                let latitude = position.coords.latitude;
                let longitude = position.coords.longitude;
                console.log("Retrieved Geolocation:", "Latitude =", latitude, "Longitude =", longitude);

                try {
                    const result = await this.rpc("/appointment_geolocation/checkin", {
                        event_id: this.event_id,
                        latitude: latitude,
                        longitude: longitude,
                    });

                    if (result.status === "success") {
                        this.notification.add("Geolocation updated successfully!", { type: "success" });

                        // Refresh the event form after successful check-in
                        this.actionService.doAction({
                            type: "ir.actions.act_window",
                            res_model: "calendar.event",
                            res_id: this.event_id,
                            views: [[false, "form"]],
                            target: "current",
                        });
                    } else {
                        this.notification.add("Error updating geolocation: " + result.message, { type: "danger" });
                    }
                } catch (error) {
                    this.notification.add("Error updating geolocation: " + error.message, { type: "danger" });
                }
            },
            (error) => {
                this.notification.add("Error retrieving geolocation: " + error.message, { type: "danger" });
            }
        );
    }
}
{
    "name": "Appointment Geolocation",
    "version": "17.0.1.0.0",
    "summary": "Capture and store geolocation on appointment checkin",
    "description": "This module captures the current geolocation when an employee confirms checkin on an appointment.",
    "category": "Tools",
    "author": "Metro Ict Limited",
    "website": "https://odoo.co.ke",
    "license": "LGPL-3",
    "depends": [
        "appointment",
        "calendar",
        "web",
        "web_gantt"

    ],
    "data": [
        "views/calendar_event_form_inherit.xml",
        "views/actions.xml",
        "views/calendar_event_tree_inherit.xml",
    ],


    "assets": {
        "web.assets_backend": [
            "appointment_geolocation/static/src/js/geolocation_action.js",
            "appointment_geolocation/static/src/js/geolocation_gantt_popover.js",
            "appointment_geolocation/static/src/js/override_gantt_checkin.js",
            "appointment_geolocation/static/src/xml/geolocation_gantt_popover.xml",

        ]
    },


    "installable": True,
    "application": False,
    "auto_install": False
}
from odoo import http
from odoo.http import request

class GeolocationController(http.Controller):

    @http.route('/appointment_geolocation/checkin', type='json', auth="user")
    def checkin(self, event_id, latitude, longitude):
        event = request.env['calendar.event'].browse(event_id)
        if event:
            event.sudo().write({'latitude': latitude, 'longitude': longitude})
            return {"status": "success"}
        return {"status": "error", "message": "Event not found"}

    @http.route('/appointment_geolocation/uncheckin', type='json', auth="user")
    def uncheckin(self, event_id):
        """
        Reset the geolocation fields to 0.0 for the given event_id
        """
        event = request.env['calendar.event'].browse(event_id)
        if event:
            event.sudo().write({'latitude': 0.0, 'longitude': 0.0})
            return {"status": "success"}
        return {"status": "error", "message": "Event not found"}from . import geolocation_controller
from . import calendar_event_inheritfrom odoo import models, fields, api

class CalendarEventInherit(models.Model):
    _inherit = "calendar.event"

    latitude = fields.Float(string="Latitude", help="Captured geolocation latitude")
    longitude = fields.Float(string="Longitude", help="Captured geolocation longitude")

    # Computed field that returns a clickable Google Maps link
    location_url = fields.Char(
        string="Map Link",
        compute="_compute_location_url",
        store=False
    )

    @api.depends('latitude', 'longitude')
    def _compute_location_url(self):
        for rec in self:
            if rec.latitude and rec.longitude:
                # Example: https://www.google.com/maps?q=-1.286389,36.817223
                rec.location_url = f"https://www.google.com/maps?q={rec.latitude},{rec.longitude}"
            else:
                rec.location_url = False



    def action_confirm_checkin(self):
        """
        Triggered when the 'Confirm Check-In' button is clicked.
        """
        self.ensure_one()
        return {
            'type': 'ir.actions.client',
            'tag': 'appointment_geolocation.confirm_checkin',  # ? Matches JS action
            'params': {'event_id': self.id},
        }
from . import models
from . import controllers
{
    "name": "Appointment Geolocation",
    "version": "17.0.1.0.0",
    "summary": "Capture and store geolocation on appointment checkin",
    "description": "This module captures the current geolocation when an employee confirms checkin on an appointment.",
    "category": "Tools",
    "author": "Metro Ict Limited",
    "website": "https://odoo.co.ke",
    "license": "LGPL-3",
    "depends": [
        "appointment",
        "calendar",
        "web",
        "web_gantt"

    ],
    "data": [
        "views/calendar_event_form_inherit.xml",
        "views/actions.xml",
        "views/calendar_event_tree_inherit.xml",
    ],


    "assets": {
        "web.assets_backend": [
            "appointment_geolocation/static/src/js/geolocation_action.js",
            "appointment_geolocation/static/src/js/geolocation_gantt_popover.js",
            "appointment_geolocation/static/src/js/override_gantt_checkin.js",
            "appointment_geolocation/static/src/xml/geolocation_gantt_popover.xml",

        ]
    },


    "installable": True,
    "application": False,
    "auto_install": False
}
from . import models
from . import controllers
=== /home/adulam/Documents/custom_addons/appointment_geolocation/models/__init__.py ===
from . import calendar_event_inherit=== /home/adulam/Documents/custom_addons/appointment_geolocation/models/calendar_event_inherit.py ===
from odoo import models, fields, api

class CalendarEventInherit(models.Model):
    _inherit = "calendar.event"

    latitude = fields.Float(string="Latitude", help="Captured geolocation latitude")
    longitude = fields.Float(string="Longitude", help="Captured geolocation longitude")

    # Computed field that returns a clickable Google Maps link
    location_url = fields.Char(
        string="Map Link",
        compute="_compute_location_url",
        store=False
    )

    @api.depends('latitude', 'longitude')
    def _compute_location_url(self):
        for rec in self:
            if rec.latitude and rec.longitude:
                # Example: https://www.google.com/maps?q=-1.286389,36.817223
                rec.location_url = f"https://www.google.com/maps?q={rec.latitude},{rec.longitude}"
            else:
                rec.location_url = False



    def action_confirm_checkin(self):
        """
        Triggered when the 'Confirm Check-In' button is clicked.
        """
        self.ensure_one()
        return {
            'type': 'ir.actions.client',
            'tag': 'appointment_geolocation.confirm_checkin',  # ? Matches JS action
            'params': {'event_id': self.id},
        }
=== /home/adulam/Documents/custom_addons/appointment_geolocation/geoloc.txt ===
=== /home/adulam/Documents/custom_addons/appointment_geolocation/apptmnt_geo.txt ===
from . import models
from . import controllers
{
    "name": "Appointment Geolocation",
    "version": "17.0.1.0.0",
    "summary": "Capture and store geolocation on appointment checkin",
    "description": "This module captures the current geolocation when an employee confirms checkin on an appointment.",
    "category": "Tools",
    "author": "Metro Ict Limited",
    "website": "https://odoo.co.ke",
    "license": "LGPL-3",
    "depends": [
        "appointment",
        "calendar",
        "web",
        "web_gantt"

    ],
    "data": [
        "views/calendar_event_form_inherit.xml",
        "views/actions.xml",
        "views/calendar_event_tree_inherit.xml",
    ],


    "assets": {
        "web.assets_backend": [
            "appointment_geolocation/static/src/js/geolocation_action.js",
            "appointment_geolocation/static/src/js/geolocation_gantt_popover.js",
            "appointment_geolocation/static/src/js/override_gantt_checkin.js",
            "appointment_geolocation/static/src/xml/geolocation_gantt_popover.xml",

        ]
    },


    "installable": True,
    "application": False,
    "auto_install": False
}
=== /home/adulam/Documents/custom_addons/appointment_geolocation/__init__.py ===
from . import models
from . import controllers
